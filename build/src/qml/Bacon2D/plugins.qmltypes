import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -notrelocatable Bacon2D 1.0 /home/kai/Desktop/Bacon2D/build/src/qml'

Module {
    dependencies: ["QtQuick 2.3"]
    Component {
        name: "Bacon2D"
        prototype: "QObject"
        exports: ["Bacon2D/Bacon2D 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "State"
            values: {
                "Active": 0,
                "Inactive": 1,
                "Running": 2,
                "Paused": 3,
                "Suspended": 4
            }
        }
    }
    Component {
        name: "Behavior"
        prototype: "QObject"
        exports: ["Bacon2D/Bacon2DBehavior 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "delta"; type: "int"; isReadonly: true }
    }
    Component {
        name: "Box2DBody"
        defaultProperty: "fixtures"
        prototype: "QObject"
        exports: ["Bacon2D/Body 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BodyType"
            values: {
                "Static": 0,
                "Kinematic": 1,
                "Dynamic": 2
            }
        }
        Property { name: "world"; type: "Box2DWorld"; isPointer: true }
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "linearDamping"; type: "float" }
        Property { name: "angularDamping"; type: "float" }
        Property { name: "bodyType"; type: "BodyType" }
        Property { name: "bullet"; type: "bool" }
        Property { name: "sleepingAllowed"; type: "bool" }
        Property { name: "fixedRotation"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "awake"; type: "bool" }
        Property { name: "linearVelocity"; type: "QPointF" }
        Property { name: "angularVelocity"; type: "float" }
        Property { name: "fixtures"; type: "Box2DFixture"; isList: true; isReadonly: true }
        Property { name: "gravityScale"; type: "float" }
        Signal { name: "bodyCreated" }
        Signal { name: "positionChanged" }
        Method {
            name: "applyForce"
            Parameter { name: "force"; type: "QPointF" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "applyForceToCenter"
            Parameter { name: "force"; type: "QPointF" }
        }
        Method {
            name: "applyTorque"
            Parameter { name: "torque"; type: "double" }
        }
        Method {
            name: "applyLinearImpulse"
            Parameter { name: "impulse"; type: "QPointF" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "applyAngularImpulse"
            Parameter { name: "impulse"; type: "double" }
        }
        Method { name: "getWorldCenter"; type: "QPointF" }
        Method { name: "getLocalCenter"; type: "QPointF" }
        Method { name: "getMass"; type: "float" }
        Method { name: "resetMassData" }
        Method { name: "getInertia"; type: "float" }
        Method {
            name: "toWorldPoint"
            type: "QPointF"
            Parameter { name: "localPoint"; type: "QPointF" }
        }
        Method {
            name: "toWorldVector"
            type: "QPointF"
            Parameter { name: "localVector"; type: "QPointF" }
        }
        Method {
            name: "toLocalPoint"
            type: "QPointF"
            Parameter { name: "worldPoint"; type: "QPointF" }
        }
        Method {
            name: "toLocalVector"
            type: "QPointF"
            Parameter { name: "worldVector"; type: "QPointF" }
        }
        Method {
            name: "getLinearVelocityFromWorldPoint"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "getLinearVelocityFromLocalPoint"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "addFixture"
            Parameter { name: "fixture"; type: "Box2DFixture"; isPointer: true }
        }
    }
    Component {
        name: "Box2DBox"
        prototype: "Box2DFixture"
        exports: ["Bacon2D/Box 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "rotation"; type: "double" }
    }
    Component {
        name: "Box2DChain"
        prototype: "Box2DFixture"
        exports: ["Bacon2D/Chain 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertices"; type: "QVariantList" }
        Property { name: "loop"; type: "bool" }
        Property { name: "prevVertex"; type: "QPointF" }
        Property { name: "nextVertex"; type: "QPointF" }
    }
    Component {
        name: "Box2DCircle"
        prototype: "Box2DFixture"
        exports: ["Bacon2D/Circle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "radius"; type: "float" }
    }
    Component {
        name: "Box2DContact"
        prototype: "QObject"
        exports: ["Bacon2D/Contact 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool" }
        Property { name: "fixtureA"; type: "Box2DFixture"; isReadonly: true; isPointer: true }
        Property { name: "fixtureB"; type: "Box2DFixture"; isReadonly: true; isPointer: true }
        Property { name: "childIndexA"; type: "int"; isReadonly: true }
        Property { name: "childIndexB"; type: "int"; isReadonly: true }
        Property { name: "friction"; type: "double" }
        Property { name: "restitution"; type: "double" }
        Property { name: "tangentSpeed"; type: "double" }
        Method { name: "isTouching"; type: "bool" }
        Method { name: "resetFriction" }
        Method { name: "resetRestitution" }
    }
    Component {
        name: "Box2DDebugDraw"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Bacon2D/DebugDraw 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DebugFlag"
            values: {
                "Shape": 1,
                "Joint": 2,
                "AABB": 4,
                "Pair": 8,
                "CenterOfMass": 16,
                "Everything": 31
            }
        }
        Property { name: "axisScale"; type: "double" }
        Property { name: "flags"; type: "DebugFlag" }
        Property { name: "world"; type: "Box2DWorld"; isPointer: true }
    }
    Component {
        name: "Box2DDistanceJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/DistanceJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "length"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "dampingRatio"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DEdge"
        prototype: "Box2DFixture"
        exports: ["Bacon2D/Edge 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertices"; type: "QVariantList" }
    }
    Component {
        name: "Box2DFixture"
        prototype: "QObject"
        exports: ["Bacon2D/Fixture 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CategoryFlag"
            values: {
                "Category1": 1,
                "Category2": 2,
                "Category3": 4,
                "Category4": 8,
                "Category5": 16,
                "Category6": 32,
                "Category7": 64,
                "Category8": 128,
                "Category9": 256,
                "Category10": 512,
                "Category11": 1024,
                "Category12": 2048,
                "Category13": 4096,
                "Category14": 8192,
                "Category15": 16384,
                "Category16": 32768,
                "All": 65535,
                "None": 0
            }
        }
        Enum {
            name: "CategoryFlags"
            values: {
                "Category1": 1,
                "Category2": 2,
                "Category3": 4,
                "Category4": 8,
                "Category5": 16,
                "Category6": 32,
                "Category7": 64,
                "Category8": 128,
                "Category9": 256,
                "Category10": 512,
                "Category11": 1024,
                "Category12": 2048,
                "Category13": 4096,
                "Category14": 8192,
                "Category15": 16384,
                "Category16": 32768,
                "All": 65535,
                "None": 0
            }
        }
        Property { name: "density"; type: "float" }
        Property { name: "friction"; type: "float" }
        Property { name: "restitution"; type: "float" }
        Property { name: "sensor"; type: "bool" }
        Property { name: "categories"; type: "CategoryFlags" }
        Property { name: "collidesWith"; type: "CategoryFlags" }
        Property { name: "groupIndex"; type: "int" }
        Signal {
            name: "beginContact"
            Parameter { name: "other"; type: "Box2DFixture"; isPointer: true }
        }
        Signal {
            name: "endContact"
            Parameter { name: "other"; type: "Box2DFixture"; isPointer: true }
        }
        Method { name: "getBody"; type: "Box2DBody*" }
    }
    Component {
        name: "Box2DFrictionJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/FrictionJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "maxForce"; type: "float" }
        Property { name: "maxTorque"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DGearJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/GearJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "joint1"; type: "Box2DJoint"; isPointer: true }
        Property { name: "joint2"; type: "Box2DJoint"; isPointer: true }
        Property { name: "ratio"; type: "float" }
    }
    Component {
        name: "Box2DJoint"
        prototype: "QObject"
        exports: ["Bacon2D/Joint 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "JointType"
            values: {
                "UnknownJoint": 0,
                "RevoluteJoint": 1,
                "PrismaticJoint": 2,
                "DistanceJoint": 3,
                "PulleyJoint": 4,
                "MouseJoint": 5,
                "GearJoint": 6,
                "WheelJoint": 7,
                "WeldJoint": 8,
                "FrictionJoint": 9,
                "RopeJoint": 10,
                "MotorJoint": 11
            }
        }
        Property { name: "jointType"; type: "JointType"; isReadonly: true }
        Property { name: "collideConnected"; type: "bool" }
        Property { name: "bodyA"; type: "Box2DBody"; isPointer: true }
        Property { name: "bodyB"; type: "Box2DBody"; isPointer: true }
        Signal { name: "created" }
    }
    Component {
        name: "Box2DMotorJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/MotorJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "linearOffset"; type: "QPointF" }
        Property { name: "angularOffset"; type: "float" }
        Property { name: "maxForce"; type: "float" }
        Property { name: "maxTorque"; type: "float" }
        Property { name: "correctionFactor"; type: "float" }
    }
    Component {
        name: "Box2DMouseJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/MouseJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QPointF" }
        Property { name: "maxForce"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "dampingRatio"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DPolygon"
        prototype: "Box2DFixture"
        exports: ["Bacon2D/Polygon 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertices"; type: "QVariantList" }
    }
    Component {
        name: "Box2DPrismaticJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/PrismaticJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "localAxisA"; type: "QPointF" }
        Property { name: "referenceAngle"; type: "float" }
        Property { name: "enableLimit"; type: "bool" }
        Property { name: "lowerTranslation"; type: "float" }
        Property { name: "upperTranslation"; type: "float" }
        Property { name: "enableMotor"; type: "bool" }
        Property { name: "maxMotorForce"; type: "float" }
        Property { name: "motorSpeed"; type: "float" }
        Method { name: "getJointTranslation"; type: "float" }
        Method { name: "getJointSpeed"; type: "float" }
    }
    Component {
        name: "Box2DPulleyJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/PulleyJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "groundAnchorA"; type: "QPointF" }
        Property { name: "groundAnchorB"; type: "QPointF" }
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "lengthA"; type: "float" }
        Property { name: "lengthB"; type: "float" }
        Property { name: "ratio"; type: "float" }
        Method { name: "getCurrentLengthA"; type: "float" }
        Method { name: "getCurrentLengthB"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DRayCast"
        prototype: "QObject"
        exports: ["Bacon2D/RayCast 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "maxFraction"; type: "float" }
        Signal {
            name: "fixtureReported"
            Parameter { name: "fixture"; type: "Box2DFixture"; isPointer: true }
            Parameter { name: "point"; type: "QPointF" }
            Parameter { name: "normal"; type: "QPointF" }
            Parameter { name: "fraction"; type: "double" }
        }
    }
    Component {
        name: "Box2DRevoluteJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/RevoluteJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "referenceAngle"; type: "float" }
        Property { name: "enableLimit"; type: "bool" }
        Property { name: "lowerAngle"; type: "float" }
        Property { name: "upperAngle"; type: "float" }
        Property { name: "enableMotor"; type: "bool" }
        Property { name: "motorSpeed"; type: "float" }
        Property { name: "maxMotorTorque"; type: "float" }
        Method { name: "getJointAngle"; type: "float" }
        Method { name: "getJointSpeed"; type: "float" }
    }
    Component {
        name: "Box2DRopeJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/RopeJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "maxLength"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DWeldJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/WeldJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "referenceAngle"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "dampingRatio"; type: "float" }
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
    }
    Component {
        name: "Box2DWheelJoint"
        prototype: "Box2DJoint"
        exports: ["Bacon2D/WheelJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "localAxisA"; type: "QPointF" }
        Property { name: "dampingRatio"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "maxMotorTorque"; type: "float" }
        Property { name: "motorSpeed"; type: "float" }
        Property { name: "enableMotor"; type: "bool" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method { name: "getJointTranslation"; type: "float" }
        Method { name: "getJointSpeed"; type: "float" }
    }
    Component {
        name: "Box2DWorld"
        prototype: "QObject"
        exports: ["Bacon2D/World 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "running"; type: "bool" }
        Property { name: "timeStep"; type: "float" }
        Property { name: "velocityIterations"; type: "int" }
        Property { name: "positionIterations"; type: "int" }
        Property { name: "gravity"; type: "QPointF" }
        Property { name: "autoClearForces"; type: "bool" }
        Property { name: "profile"; type: "Box2DProfile"; isReadonly: true; isPointer: true }
        Property { name: "pixelsPerMeter"; type: "float" }
        Property { name: "enableContactEvents"; type: "bool" }
        Signal {
            name: "preSolve"
            Parameter { name: "contact"; type: "Box2DContact"; isPointer: true }
        }
        Signal {
            name: "postSolve"
            Parameter { name: "contact"; type: "Box2DContact"; isPointer: true }
        }
        Signal { name: "stepped" }
        Method { name: "step" }
        Method { name: "clearForces" }
        Method {
            name: "rayCast"
            Parameter { name: "rayCast"; type: "Box2DRayCast"; isPointer: true }
            Parameter { name: "point1"; type: "QPointF" }
            Parameter { name: "point2"; type: "QPointF" }
        }
    }
    Component {
        name: "Entity"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Bacon2D/Entity 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "updateInterval"; type: "int" }
        Property { name: "game"; type: "Game"; isReadonly: true; isPointer: true }
        Property { name: "scene"; type: "Scene"; isReadonly: true; isPointer: true }
        Property { name: "behavior"; type: "Behavior"; isPointer: true }
    }
    Component {
        name: "Game"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Bacon2D/Game 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "currentScene"; type: "Scene"; isPointer: true }
        Property { name: "ups"; type: "int" }
        Property { name: "mouse"; type: "QPointF"; isReadonly: true }
        Property { name: "gameName"; type: "string" }
        Property { name: "gameState"; type: "Bacon2D::State" }
        Property { name: "stackLevel"; type: "int"; isReadonly: true }
        Method {
            name: "pushScene"
            Parameter { name: "scene"; type: "Scene"; isPointer: true }
        }
        Method { name: "popScene"; type: "Scene*" }
    }
    Component {
        name: "ImageLayer"
        defaultProperty: "data"
        prototype: "Layer"
        exports: ["Bacon2D/ImageLayer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QUrl" }
        Property { name: "imageWidth"; type: "double"; isReadonly: true }
        Property { name: "imageHeight"; type: "double"; isReadonly: true }
        Property { name: "horizontalOffset"; type: "double" }
        Property { name: "verticalOffset"; type: "double" }
    }
    Component {
        name: "Layer"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Bacon2D/Layer 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LayerType"
            values: {
                "Infinite": 0,
                "Mirrored": 1
            }
        }
        Property { name: "layerType"; type: "Layer::LayerType" }
        Property { name: "behavior"; type: "Behavior"; isPointer: true }
        Property { name: "game"; type: "Game"; isReadonly: true; isPointer: true }
        Property { name: "scene"; type: "Scene"; isPointer: true }
        Property { name: "updateInterval"; type: "int" }
    }
    Component {
        name: "QAbstractState"
        prototype: "QObject"
        Property { name: "active"; type: "bool"; isReadonly: true }
        Signal { name: "entered" }
        Signal { name: "exited" }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "bool" }
        }
    }
    Component {
        name: "QState"
        prototype: "QAbstractState"
        Enum {
            name: "ChildMode"
            values: {
                "ExclusiveStates": 0,
                "ParallelStates": 1
            }
        }
        Enum {
            name: "RestorePolicy"
            values: {
                "DontRestoreProperties": 0,
                "RestoreProperties": 1
            }
        }
        Property { name: "initialState"; type: "QAbstractState"; isPointer: true }
        Property { name: "errorState"; type: "QAbstractState"; isPointer: true }
        Property { name: "childMode"; type: "ChildMode" }
        Signal { name: "finished" }
        Signal { name: "propertiesAssigned" }
    }
    Component {
        name: "Scene"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Bacon2D/Scene 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "running"; type: "bool"; isReadonly: true }
        Property { name: "viewport"; type: "Viewport"; isPointer: true }
        Property { name: "game"; type: "Game"; isReadonly: true; isPointer: true }
        Property { name: "world"; type: "Box2DWorld"; isReadonly: true; isPointer: true }
        Property { name: "physics"; type: "bool" }
        Property { name: "debug"; type: "bool" }
        Property { name: "timeStep"; type: "float" }
        Property { name: "velocityIterations"; type: "int" }
        Property { name: "positionIterations"; type: "int" }
        Property { name: "gravity"; type: "QPointF" }
        Property { name: "autoClearForces"; type: "bool" }
        Property { name: "profile"; type: "Box2DProfile"; isReadonly: true; isPointer: true }
        Property { name: "pixelsPerMeter"; type: "float" }
        Property { name: "enterAnimation"; type: "QObject"; isPointer: true }
        Property { name: "exitAnimation"; type: "QObject"; isPointer: true }
        Signal { name: "initialized" }
        Signal {
            name: "preSolve"
            Parameter { name: "contact"; type: "Box2DContact"; isPointer: true }
        }
        Signal {
            name: "postSolve"
            Parameter { name: "contact"; type: "Box2DContact"; isPointer: true }
        }
        Signal { name: "stepped" }
        Method { name: "step" }
        Method { name: "clearForces" }
        Method {
            name: "rayCast"
            Parameter { name: "rayCast"; type: "Box2DRayCast"; isPointer: true }
            Parameter { name: "point1"; type: "QPointF" }
            Parameter { name: "point2"; type: "QPointF" }
        }
    }
    Component {
        name: "ScriptBehavior"
        prototype: "Behavior"
        exports: ["Bacon2D/ScriptBehavior 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "script"; type: "QQmlScriptString" }
    }
    Component {
        name: "ScrollBehavior"
        prototype: "Behavior"
        exports: ["Bacon2D/ScrollBehavior 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "horizontalStep"; type: "double" }
        Property { name: "verticalStep"; type: "double" }
    }
    Component {
        name: "Settings"
        prototype: "QObject"
        exports: ["Bacon2D/Settings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "category"; type: "string" }
        Method { name: "propertyChanged" }
    }
    Component {
        name: "Sprite"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Bacon2D/Sprite 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "animations"; type: "SpriteAnimation"; isList: true; isReadonly: true }
        Property { name: "animation"; type: "string" }
        Property { name: "verticalMirror"; type: "bool" }
        Property { name: "horizontalMirror"; type: "bool" }
        Property { name: "entity"; type: "Entity"; isPointer: true }
        Property { name: "spriteState"; type: "Bacon2D::State" }
        Method { name: "initializeAnimation" }
        Method { name: "onGameStateChanged" }
    }
    Component {
        name: "SpriteAnimation"
        prototype: "QState"
        exports: ["Bacon2D/SpriteAnimation 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "frames"; type: "int" }
        Property { name: "frame"; type: "int" }
        Property { name: "initialFrame"; type: "int" }
        Property { name: "running"; type: "bool"; isReadonly: true }
        Property { name: "loops"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "duration"; type: "int" }
        Property { name: "inverse"; type: "bool" }
        Signal { name: "finished" }
    }
    Component {
        name: "Viewport"
        defaultProperty: "data"
        prototype: "Entity"
        exports: ["Bacon2D/Viewport 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "xOffset"; type: "float" }
        Property { name: "yOffset"; type: "float" }
        Property { name: "contentWidth"; type: "float" }
        Property { name: "contentHeight"; type: "float" }
        Property { name: "animationDuration"; type: "int" }
        Method {
            name: "hScroll"
            Parameter { name: "step"; type: "float" }
        }
        Method {
            name: "vScroll"
            Parameter { name: "step"; type: "float" }
        }
    }
}
